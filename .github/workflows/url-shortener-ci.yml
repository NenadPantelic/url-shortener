# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# Name[optional] - displayed on repos action page
name: url-shortener service CI

on: # required
  # whenever the code is pushed to some branch this event is triggered and the workflow should be executed
  push:
  #   branches: [$default-branch]
  # whenever the PR is created this event is triggered and the workflow should be executed
  # without stating branches here, it means 'for any branch'
  pull_request:
  #   branches: [$default-branch]
  # The list of events - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

jobs: # required
  # one or more jobs
  url-shortener-build: # jobs.build
    # trigger this job only if the source branch is url-shortener or the main branch itself
    if: ${{ github.ref == 'refs/heads/url-shortener' || github.ref == 'refs/heads/main' || github.head_ref == 'url-shortener' || github.head_ref == 'main' }}
    runs-on: ubuntu-latest
    # sequence of tasks/steps
    steps:
      # 1. Set up JDK 17
      # 2. Build with Maven
      # based on predefined checkout action - https://github.com/actions/checkout/tree/v3/; use `uses` expression
      - uses: actions/checkout@v3
      # name of the step
      - name: Set up JDK 17
        # https://github.com/actions/setup-java/tree/v3/; downloads and sets up the wanted version of Java
        uses: actions/setup-java@v3
        with:
          # uses Java 17
          java-version: "17"
          # based on temurin version of Java - https://adoptium.net/temurin/releases/
          distribution: "temurin"
          # cache Maven dependencies between builds
          cache: maven
      - name: Build with Maven
        # package the artifact in non-interactive mode based on POM file
        run: mvn -B package --file url-shortener/pom.xml
        # on Ubuntu, Docker comes preinstalled
      - name: Build and push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: npantelic/url-shortener
          tags: 1.0, latest
          registry: docker.io
          dockerfile: url-shortener/Dockerfile-ci
          # secrets will be stored in GH repo; Settings -> Secrets and variables -> Actions: Repository secrets
          # DOCKER_USERNAME: <your-docker-username>
          # DOCKER_PASSWORD: <your-docker-password>
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  # The way to make jobs dependent
  # publish:
  #   needs: build
  frontend-build:
    if: ${{ github.ref == 'refs/heads/frontend' || github.ref == 'refs/heads/main' || github.head_ref == 'frontend' || github.head_ref == 'main' }}
    # The operating system installed on the CI/CD workflow runner
    runs-on: ${{matrix.os}} # Ubuntu, Windows and macOS
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        node-version: [12.x, 14.x, 16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      # clean install node modules; when you have multiple statements, it is easier to use block statements
      - run: cd frontend && npm ci
      # run build
      - run: cd frontend && npm run build --if-present
      # for tests
      # - run: npm test
      - if: matrix.os  == 'ubuntu-latest'
        name: Build and push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: npantelic/url-shortener-frontend
          tags: 1.0, latest
          registry: docker.io
          dockerfile: frontend/Dockerfile-ci
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  url-checker-build:
    if: ${{ github.ref == 'refs/heads/url-checker' || github.ref == 'refs/heads/main' || github.head_ref == 'url-checker' || github.head_ref == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cd url-checker
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     # otherwise it will execute e2e tests in the root folder
      #     cd url-checker
      #     pytest
      - name: Build and push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: npantelic/url-checker
          tags: 1.0, latest
          registry: docker.io
          dockerfile: url-checker/Dockerfile-ci
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
